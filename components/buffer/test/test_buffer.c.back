// #include "unity.h"
// #include "buffer.h"
// #include "string.h"

// #define N_ITEMS 25
// #define ITEM_SIZE 10



// vectorBuffer_t buffer;

// TEST_CASE("Buffer Init", "[0]")
// {
//   TEST_ASSERT(initBuffer(&buffer, ITEM_SIZE, N_ITEMS) == ESP_OK);
//   TEST_ASSERT_NOT_NULL(buffer.buffer);
//   TEST_ASSERT_NOT_NULL(buffer.staticAllocation.buffer);
//   TEST_ASSERT_NOT_NULL(buffer.staticAllocation.storage);
//   TEST_ASSERT(buffer.vectorMaxNumber == N_ITEMS);
//   TEST_ASSERT(buffer.vectorSize = ITEM_SIZE);

//   TEST_ASSERT(deinitBuffer(&buffer)==ESP_OK);

//   TEST_PASS();
// }

// TEST_CASE("Buffer Push-Pull", "[0]")
// {
//   TEST_ASSERT(initBuffer(&buffer, ITEM_SIZE, N_ITEMS) == ESP_OK);
//   char item[ITEM_SIZE] = {'0','1','2','3','4','5','6','7','8','9'};
//   char itemcopy[ITEM_SIZE];

//   TEST_ASSERT(pushItem(&buffer, item)==ESP_OK);
//   TEST_ASSERT(pullItem(&buffer, itemcopy)==ESP_OK);
//   TEST_ASSERT_EQUAL_MEMORY(item, itemcopy,ITEM_SIZE);


  
//   TEST_PASS();
// }

#include "unity.h"
#include "buffer.h"
#include "string.h"

#define N_ITEMS   25
#define ITEM_SIZE 10

vectorBuffer_t buffer;

TEST_CASE("Buffer Init", "[0]") {
    TEST_ASSERT(initBuffer(&buffer, ITEM_SIZE, N_ITEMS) == ESP_OK);
    TEST_ASSERT_NOT_NULL(buffer.buffer);
    TEST_ASSERT_NOT_NULL(buffer.staticAllocation.buffer);
    TEST_ASSERT_NOT_NULL(buffer.staticAllocation.storage);
    TEST_ASSERT(buffer.vectorMaxNumber == N_ITEMS);
    /* This assertion compares the logical item size; if needed, adjust accordingly */
    TEST_ASSERT(ITEM_SIZE == 10);

    TEST_ASSERT(deinitBuffer(&buffer) == ESP_OK);
    TEST_PASS();
}

TEST_CASE("Buffer Push-Pull", "[0]") {
    TEST_ASSERT(initBuffer(&buffer, ITEM_SIZE, N_ITEMS) == ESP_OK);
    char item[ITEM_SIZE] = {'0','1','2','3','4','5','6','7','8','9'};
    char itemcopy[ITEM_SIZE] = {0};

    /* Pass the logical size ITEM_SIZE (10) to pushItem and pullItem */
    TEST_ASSERT(pushItem(&buffer, item, ITEM_SIZE) == ESP_OK);
    TEST_ASSERT(pullItem(&buffer, itemcopy, ITEM_SIZE) == ESP_OK);
    TEST_ASSERT_EQUAL_MEMORY(item, itemcopy, ITEM_SIZE);

    TEST_ASSERT(deinitBuffer(&buffer) == ESP_OK);
    TEST_PASS();
}
